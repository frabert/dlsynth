#ifndef WAVEFORMATEX_HPP
#define WAVEFORMATEX_HPP
/*
================= DO NOT EDIT THIS FILE ====================
This file has  been automatically generated by genstructs.py

Please  edit  structs.xml instead, and  re-run genstructs.py
============================================================
*/
#include "StructLoader.hpp"
#include "WaveFormat.hpp"
struct WaveFormatEx {
  std::uint16_t FormatTag;
  std::uint16_t NumChannels;
  std::uint32_t SamplesPerSec;
  std::uint32_t AvgBytesPerSec;
  std::uint16_t BlockAlign;
  std::uint16_t BitsPerSample;
  std::uint16_t ExtraInfoSize;
  std::vector<char> ExtraData;

  inline WaveFormat toWaveFormat() const {
    return {FormatTag, NumChannels, SamplesPerSec, AvgBytesPerSec, BlockAlign};
  }
};

template <> struct StructLoader<WaveFormatEx> {
  static const char* readBuffer(const char *begin, const char *end, WaveFormatEx &output) {
    if (begin > end) {
      throw DLSynth::Error("Wrong data size", DLSynth::ErrorCode::INVALID_FILE);
    }
    const char *cur_pos = begin;
    cur_pos = StructLoader<std::uint16_t>::readBuffer(cur_pos, end, output.FormatTag);
    cur_pos = StructLoader<std::uint16_t>::readBuffer(cur_pos, end, output.NumChannels);
    cur_pos = StructLoader<std::uint32_t>::readBuffer(cur_pos, end, output.SamplesPerSec);
    cur_pos = StructLoader<std::uint32_t>::readBuffer(cur_pos, end, output.AvgBytesPerSec);
    cur_pos = StructLoader<std::uint16_t>::readBuffer(cur_pos, end, output.BlockAlign);
    cur_pos = StructLoader<std::uint16_t>::readBuffer(cur_pos, end, output.BitsPerSample);
    cur_pos = StructLoader<std::uint16_t>::readBuffer(cur_pos, end, output.ExtraInfoSize);
    {
      std::size_t count = 0;
      while (count < output.ExtraInfoSize && cur_pos < end) {
        char elem;
        cur_pos = StructLoader<char>::readBuffer(cur_pos, end, elem);
        output.ExtraData.push_back(elem);
      }
    }
    return cur_pos;
  }
};
#endif
