#ifndef UUID_HPP
#define UUID_HPP
/*
================= DO NOT EDIT THIS FILE ====================
This file has  been automatically generated by genstructs.py

Please  edit  structs.xml instead, and  re-run genstructs.py
============================================================
*/
#include "StructLoader.hpp"
struct Uuid {
  std::uint32_t a;
  std::uint16_t b;
  std::uint16_t c;
  std::array<std::uint8_t, 8> d;
};

template <> struct StructLoader<Uuid> {
  static const char* readBuffer(const char *begin, const char *end, Uuid &output) {
    if (begin > end) {
      throw DLSynth::Error("Wrong data size", DLSynth::ErrorCode::INVALID_FILE);
    }
    const char *cur_pos = begin;
    cur_pos = StructLoader<std::uint32_t>::readBuffer(cur_pos, end, output.a);
    cur_pos = StructLoader<std::uint16_t>::readBuffer(cur_pos, end, output.b);
    cur_pos = StructLoader<std::uint16_t>::readBuffer(cur_pos, end, output.c);
    cur_pos = readArray<std::uint8_t>(cur_pos, end, output.d);
    return cur_pos;
  }
};
#endif
