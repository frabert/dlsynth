#ifndef CBLOCK_HPP
#define CBLOCK_HPP
/*
================= DO NOT EDIT THIS FILE ====================
This file has  been automatically generated by genstructs.py

Please  edit  structs.xml instead, and  re-run genstructs.py
============================================================
*/
#include "StructLoader.hpp"
struct cblock {
  std::uint16_t usSource;
  std::uint16_t usControl;
  std::uint16_t usDestination;
  std::uint16_t usTransform;
  std::int32_t lScale;
};

template <> struct StructLoader<cblock> {
  static const char* readBuffer(const char *begin, const char *end, cblock &output) {
    if (begin > end) {
      throw DLSynth::Error("Wrong data size", DLSynth::ErrorCode::INVALID_FILE);
    }
    const char *cur_pos = begin;
    cur_pos = StructLoader<std::uint16_t>::readBuffer(cur_pos, end, output.usSource);
    cur_pos = StructLoader<std::uint16_t>::readBuffer(cur_pos, end, output.usControl);
    cur_pos = StructLoader<std::uint16_t>::readBuffer(cur_pos, end, output.usDestination);
    cur_pos = StructLoader<std::uint16_t>::readBuffer(cur_pos, end, output.usTransform);
    cur_pos = StructLoader<std::int32_t>::readBuffer(cur_pos, end, output.lScale);
    return cur_pos;
  }
};
#endif
