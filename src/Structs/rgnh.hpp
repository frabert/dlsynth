#ifndef RGNH_HPP
#define RGNH_HPP
/*
================= DO NOT EDIT THIS FILE ====================
This file has  been automatically generated by genstructs.py

Please  edit  structs.xml instead, and  re-run genstructs.py
============================================================
*/
#include "StructLoader.hpp"
#include "Range.hpp"
struct rgnh {
  Range RangeKey;
  Range RangeVelocity;
  std::uint16_t fusOptions;
  std::uint16_t usKeyGroup;
};

template <> struct StructLoader<rgnh> {
  static const char* readBuffer(const char *begin, const char *end, rgnh &output) {
    if (begin > end) {
      throw DLSynth::Error("Wrong data size", DLSynth::ErrorCode::INVALID_FILE);
    }
    const char *cur_pos = begin;
    cur_pos = StructLoader<Range>::readBuffer(cur_pos, end, output.RangeKey);
    cur_pos = StructLoader<Range>::readBuffer(cur_pos, end, output.RangeVelocity);
    cur_pos = StructLoader<std::uint16_t>::readBuffer(cur_pos, end, output.fusOptions);
    cur_pos = StructLoader<std::uint16_t>::readBuffer(cur_pos, end, output.usKeyGroup);
    return cur_pos;
  }
};
#endif
